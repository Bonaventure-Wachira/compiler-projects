Grammar

    0 $accept: function $end

    1 function: function_header optional_variables body

    2 function_header: FUNCTION IDENTIFIER RETURNS type ';'

    3 optional_variables: variables
    4                   | %empty

    5 variables: variable variables
    6          | variable

    7 variable: IDENTIFIER ':' type IS statement_

    8 type: INTEGER
    9     | BOOLEAN
   10     | REAL

   11 body: BEGIN_ statement_ END ';'

   12 statement_: statement ';'
   13           | if_statement
   14           | error ';'

   15 statement: expression
   16          | REDUCE operator reductions ENDREDUCE
   17          | if_statement

   18 if_statement: IF expression THEN statement_ ELSE statement_ ENDIF

   19 operator: ADDOP
   20         | MULOP

   21 reductions: reductions statement_
   22           | %empty

   23 expression: logical_expression

   24 logical_expression: logical_expression OROP relation
   25                   | relation

   26 relation: relation ANDOP not_expression
   27         | not_expression

   28 not_expression: NOTOP comparison
   29               | comparison

   30 comparison: arithmetic_expression RELOP arithmetic_expression
   31           | arithmetic_expression

   32 arithmetic_expression: arithmetic_expression ADDOP factor
   33                      | factor

   34 factor: factor MULOP primary
   35       | primary

   36 primary: '(' expression ')'
   37        | REAL_LITERAL
   38        | BOOLEAN_LITERAL
   39        | INT_LITERAL
   40        | IDENTIFIER
   41        | '(' if_statement ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 36 41
    ')' (41) 36 41
    ':' (58) 7
    ';' (59) 2 11 12 14
    error (256) 14
    IDENTIFIER <iden> (258) 2 7 40
    INT_LITERAL <value> (259) 39
    REAL_LITERAL <value> (260) 37
    BOOLEAN_LITERAL <value> (261) 38
    REAL (262) 10
    ADDOP <oper> (263) 19 32
    MULOP <oper> (264) 20 34
    RELOP <oper> (265) 30
    ANDOP (266) 26
    OROP (267) 24
    NOTOP (268) 28
    BEGIN_ (269) 11
    BOOLEAN (270) 9
    END (271) 11
    ENDREDUCE (272) 16
    FUNCTION (273) 2
    INTEGER (274) 8
    IS (275) 7
    REDUCE (276) 16
    RETURNS (277) 2
    IF (278) 18
    THEN (279) 18
    ELSE (280) 18
    ENDIF (281) 18


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    function (32)
        on left: 1
        on right: 0
    function_header (33)
        on left: 2
        on right: 1
    optional_variables (34)
        on left: 3 4
        on right: 1
    variables (35)
        on left: 5 6
        on right: 3 5
    variable (36)
        on left: 7
        on right: 5 6
    type (37)
        on left: 8 9 10
        on right: 2 7
    body <value> (38)
        on left: 11
        on right: 1
    statement_ <value> (39)
        on left: 12 13 14
        on right: 7 11 18 21
    statement <value> (40)
        on left: 15 16 17
        on right: 12
    if_statement <value> (41)
        on left: 18
        on right: 13 17 41
    operator <oper> (42)
        on left: 19 20
        on right: 16
    reductions <value> (43)
        on left: 21 22
        on right: 16 21
    expression <value> (44)
        on left: 23
        on right: 15 18 36
    logical_expression <value> (45)
        on left: 24 25
        on right: 23 24
    relation <value> (46)
        on left: 26 27
        on right: 24 25 26
    not_expression <value> (47)
        on left: 28 29
        on right: 26 27
    comparison <value> (48)
        on left: 30 31
        on right: 28 29
    arithmetic_expression <value> (49)
        on left: 32 33
        on right: 30 31 32
    factor <value> (50)
        on left: 34 35
        on right: 32 33 34
    primary <value> (51)
        on left: 36 37 38 39 40 41
        on right: 34 35


State 0

    0 $accept: . function $end

    FUNCTION  shift, and go to state 1

    function         go to state 2
    function_header  go to state 3


State 1

    2 function_header: FUNCTION . IDENTIFIER RETURNS type ';'

    IDENTIFIER  shift, and go to state 4


State 2

    0 $accept: function . $end

    $end  shift, and go to state 5


State 3

    1 function: function_header . optional_variables body

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 4 (optional_variables)

    optional_variables  go to state 7
    variables           go to state 8
    variable            go to state 9


State 4

    2 function_header: FUNCTION IDENTIFIER . RETURNS type ';'

    RETURNS  shift, and go to state 10


State 5

    0 $accept: function $end .

    $default  accept


State 6

    7 variable: IDENTIFIER . ':' type IS statement_

    ':'  shift, and go to state 11


State 7

    1 function: function_header optional_variables . body

    BEGIN_  shift, and go to state 12

    body  go to state 13


State 8

    3 optional_variables: variables .

    $default  reduce using rule 3 (optional_variables)


State 9

    5 variables: variable . variables
    6          | variable .

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 6 (variables)

    variables  go to state 14
    variable   go to state 9


State 10

    2 function_header: FUNCTION IDENTIFIER RETURNS . type ';'

    REAL     shift, and go to state 15
    BOOLEAN  shift, and go to state 16
    INTEGER  shift, and go to state 17

    type  go to state 18


State 11

    7 variable: IDENTIFIER ':' . type IS statement_

    REAL     shift, and go to state 15
    BOOLEAN  shift, and go to state 16
    INTEGER  shift, and go to state 17

    type  go to state 19


State 12

   11 body: BEGIN_ . statement_ END ';'

    error            shift, and go to state 20
    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    REDUCE           shift, and go to state 26
    IF               shift, and go to state 27
    '('              shift, and go to state 28

    statement_             go to state 29
    statement              go to state 30
    if_statement           go to state 31
    expression             go to state 32
    logical_expression     go to state 33
    relation               go to state 34
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 13

    1 function: function_header optional_variables body .

    $default  reduce using rule 1 (function)


State 14

    5 variables: variable variables .

    $default  reduce using rule 5 (variables)


State 15

   10 type: REAL .

    $default  reduce using rule 10 (type)


State 16

    9 type: BOOLEAN .

    $default  reduce using rule 9 (type)


State 17

    8 type: INTEGER .

    $default  reduce using rule 8 (type)


State 18

    2 function_header: FUNCTION IDENTIFIER RETURNS type . ';'

    ';'  shift, and go to state 40


State 19

    7 variable: IDENTIFIER ':' type . IS statement_

    IS  shift, and go to state 41


State 20

   14 statement_: error . ';'

    ';'  shift, and go to state 42


State 21

   40 primary: IDENTIFIER .

    $default  reduce using rule 40 (primary)


State 22

   39 primary: INT_LITERAL .

    $default  reduce using rule 39 (primary)


State 23

   37 primary: REAL_LITERAL .

    $default  reduce using rule 37 (primary)


State 24

   38 primary: BOOLEAN_LITERAL .

    $default  reduce using rule 38 (primary)


State 25

   28 not_expression: NOTOP . comparison

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    '('              shift, and go to state 28

    comparison             go to state 43
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 26

   16 statement: REDUCE . operator reductions ENDREDUCE

    ADDOP  shift, and go to state 44
    MULOP  shift, and go to state 45

    operator  go to state 46


State 27

   18 if_statement: IF . expression THEN statement_ ELSE statement_ ENDIF

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    '('              shift, and go to state 28

    expression             go to state 47
    logical_expression     go to state 33
    relation               go to state 34
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 28

   36 primary: '(' . expression ')'
   41        | '(' . if_statement ')'

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    IF               shift, and go to state 27
    '('              shift, and go to state 28

    if_statement           go to state 48
    expression             go to state 49
    logical_expression     go to state 33
    relation               go to state 34
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 29

   11 body: BEGIN_ statement_ . END ';'

    END  shift, and go to state 50


State 30

   12 statement_: statement . ';'

    ';'  shift, and go to state 51


State 31

   13 statement_: if_statement .
   17 statement: if_statement .

    ';'       reduce using rule 17 (statement)
    $default  reduce using rule 13 (statement_)


State 32

   15 statement: expression .

    $default  reduce using rule 15 (statement)


State 33

   23 expression: logical_expression .
   24 logical_expression: logical_expression . OROP relation

    OROP  shift, and go to state 52

    $default  reduce using rule 23 (expression)


State 34

   25 logical_expression: relation .
   26 relation: relation . ANDOP not_expression

    ANDOP  shift, and go to state 53

    $default  reduce using rule 25 (logical_expression)


State 35

   27 relation: not_expression .

    $default  reduce using rule 27 (relation)


State 36

   29 not_expression: comparison .

    $default  reduce using rule 29 (not_expression)


State 37

   30 comparison: arithmetic_expression . RELOP arithmetic_expression
   31           | arithmetic_expression .
   32 arithmetic_expression: arithmetic_expression . ADDOP factor

    ADDOP  shift, and go to state 54
    RELOP  shift, and go to state 55

    $default  reduce using rule 31 (comparison)


State 38

   33 arithmetic_expression: factor .
   34 factor: factor . MULOP primary

    MULOP  shift, and go to state 56

    $default  reduce using rule 33 (arithmetic_expression)


State 39

   35 factor: primary .

    $default  reduce using rule 35 (factor)


State 40

    2 function_header: FUNCTION IDENTIFIER RETURNS type ';' .

    $default  reduce using rule 2 (function_header)


State 41

    7 variable: IDENTIFIER ':' type IS . statement_

    error            shift, and go to state 20
    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    REDUCE           shift, and go to state 26
    IF               shift, and go to state 27
    '('              shift, and go to state 28

    statement_             go to state 57
    statement              go to state 30
    if_statement           go to state 31
    expression             go to state 32
    logical_expression     go to state 33
    relation               go to state 34
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 42

   14 statement_: error ';' .

    $default  reduce using rule 14 (statement_)


State 43

   28 not_expression: NOTOP comparison .

    $default  reduce using rule 28 (not_expression)


State 44

   19 operator: ADDOP .

    $default  reduce using rule 19 (operator)


State 45

   20 operator: MULOP .

    $default  reduce using rule 20 (operator)


State 46

   16 statement: REDUCE operator . reductions ENDREDUCE

    $default  reduce using rule 22 (reductions)

    reductions  go to state 58


State 47

   18 if_statement: IF expression . THEN statement_ ELSE statement_ ENDIF

    THEN  shift, and go to state 59


State 48

   41 primary: '(' if_statement . ')'

    ')'  shift, and go to state 60


State 49

   36 primary: '(' expression . ')'

    ')'  shift, and go to state 61


State 50

   11 body: BEGIN_ statement_ END . ';'

    ';'  shift, and go to state 62


State 51

   12 statement_: statement ';' .

    $default  reduce using rule 12 (statement_)


State 52

   24 logical_expression: logical_expression OROP . relation

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    '('              shift, and go to state 28

    relation               go to state 63
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 53

   26 relation: relation ANDOP . not_expression

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    '('              shift, and go to state 28

    not_expression         go to state 64
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 54

   32 arithmetic_expression: arithmetic_expression ADDOP . factor

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    '('              shift, and go to state 28

    factor   go to state 65
    primary  go to state 39


State 55

   30 comparison: arithmetic_expression RELOP . arithmetic_expression

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    '('              shift, and go to state 28

    arithmetic_expression  go to state 66
    factor                 go to state 38
    primary                go to state 39


State 56

   34 factor: factor MULOP . primary

    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    '('              shift, and go to state 28

    primary  go to state 67


State 57

    7 variable: IDENTIFIER ':' type IS statement_ .

    $default  reduce using rule 7 (variable)


State 58

   16 statement: REDUCE operator reductions . ENDREDUCE
   21 reductions: reductions . statement_

    error            shift, and go to state 20
    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    ENDREDUCE        shift, and go to state 68
    REDUCE           shift, and go to state 26
    IF               shift, and go to state 27
    '('              shift, and go to state 28

    statement_             go to state 69
    statement              go to state 30
    if_statement           go to state 31
    expression             go to state 32
    logical_expression     go to state 33
    relation               go to state 34
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 59

   18 if_statement: IF expression THEN . statement_ ELSE statement_ ENDIF

    error            shift, and go to state 20
    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    REDUCE           shift, and go to state 26
    IF               shift, and go to state 27
    '('              shift, and go to state 28

    statement_             go to state 70
    statement              go to state 30
    if_statement           go to state 31
    expression             go to state 32
    logical_expression     go to state 33
    relation               go to state 34
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 60

   41 primary: '(' if_statement ')' .

    $default  reduce using rule 41 (primary)


State 61

   36 primary: '(' expression ')' .

    $default  reduce using rule 36 (primary)


State 62

   11 body: BEGIN_ statement_ END ';' .

    $default  reduce using rule 11 (body)


State 63

   24 logical_expression: logical_expression OROP relation .
   26 relation: relation . ANDOP not_expression

    ANDOP  shift, and go to state 53

    $default  reduce using rule 24 (logical_expression)


State 64

   26 relation: relation ANDOP not_expression .

    $default  reduce using rule 26 (relation)


State 65

   32 arithmetic_expression: arithmetic_expression ADDOP factor .
   34 factor: factor . MULOP primary

    MULOP  shift, and go to state 56

    $default  reduce using rule 32 (arithmetic_expression)


State 66

   30 comparison: arithmetic_expression RELOP arithmetic_expression .
   32 arithmetic_expression: arithmetic_expression . ADDOP factor

    ADDOP  shift, and go to state 54

    $default  reduce using rule 30 (comparison)


State 67

   34 factor: factor MULOP primary .

    $default  reduce using rule 34 (factor)


State 68

   16 statement: REDUCE operator reductions ENDREDUCE .

    $default  reduce using rule 16 (statement)


State 69

   21 reductions: reductions statement_ .

    $default  reduce using rule 21 (reductions)


State 70

   18 if_statement: IF expression THEN statement_ . ELSE statement_ ENDIF

    ELSE  shift, and go to state 71


State 71

   18 if_statement: IF expression THEN statement_ ELSE . statement_ ENDIF

    error            shift, and go to state 20
    IDENTIFIER       shift, and go to state 21
    INT_LITERAL      shift, and go to state 22
    REAL_LITERAL     shift, and go to state 23
    BOOLEAN_LITERAL  shift, and go to state 24
    NOTOP            shift, and go to state 25
    REDUCE           shift, and go to state 26
    IF               shift, and go to state 27
    '('              shift, and go to state 28

    statement_             go to state 72
    statement              go to state 30
    if_statement           go to state 31
    expression             go to state 32
    logical_expression     go to state 33
    relation               go to state 34
    not_expression         go to state 35
    comparison             go to state 36
    arithmetic_expression  go to state 37
    factor                 go to state 38
    primary                go to state 39


State 72

   18 if_statement: IF expression THEN statement_ ELSE statement_ . ENDIF

    ENDIF  shift, and go to state 73


State 73

   18 if_statement: IF expression THEN statement_ ELSE statement_ ENDIF .

    $default  reduce using rule 18 (if_statement)
